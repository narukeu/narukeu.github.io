import{_ as e,c as o,o as l,af as r}from"./chunks/framework.CkW8_0d0.js";const h=JSON.parse('{"title":"微服务项目中鉴权逻辑","description":"","frontmatter":{},"headers":[],"relativePath":"spring/microservice-auth.md","filePath":"spring/microservice-auth.md","lastUpdated":1760595052000}'),i={name:"spring/microservice-auth.md"};function n(s,t,a,d,g,c){return l(),o("div",null,[...t[0]||(t[0]=[r('<h1 id="微服务项目中鉴权逻辑" tabindex="-1">微服务项目中鉴权逻辑 <a class="header-anchor" href="#微服务项目中鉴权逻辑" aria-label="Permalink to &quot;微服务项目中鉴权逻辑&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>根据 AI 生成的内容整理。</p></div><p>在 Spring Cloud 企业级项目中，对 API Gateway 和后端业务微服务进行清晰的鉴权职责划分至关重要。这遵循了“纵深防御”和“关注点分离”的设计原则。</p><p>根据 Spring 官方文档、OWASP (开放式 Web 应用程序安全项目) 的指导以及 <code>pig</code>、<code>RuoYi-Cloud</code> 等知名开源项目的实践，我们可以总结出如下的内容。</p><p>核心思想是：<strong>API Gateway 作为统一入口，负责“认证 (Authentication)”和“粗粒度授权 (Coarse-Grained Authorization)”；而各个业务微服务则负责“细粒度授权 (Fine-Grained Authorization)”。</strong></p><p>以下是具体的职责划分表格：</p><h3 id="spring-cloud-gateway-与业务微服务鉴权职责划分" tabindex="-1">Spring Cloud Gateway 与业务微服务鉴权职责划分 <a class="header-anchor" href="#spring-cloud-gateway-与业务微服务鉴权职责划分" aria-label="Permalink to &quot;Spring Cloud Gateway 与业务微服务鉴权职责划分&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">职责维度</th><th style="text-align:left;">API Gateway (网关层)</th><th style="text-align:left;">业务微服务 (如: -system, -order)</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>核心职责</strong></td><td style="text-align:left;"><strong>统一认证与粗粒度授权</strong></td><td style="text-align:left;"><strong>细粒度授权与业务权限控制</strong></td></tr><tr><td style="text-align:left;"><strong>关注点</strong></td><td style="text-align:left;"><strong>“你是谁？” (Who are you?)</strong><br>确认用户身份的合法性、真实性。</td><td style="text-align:left;"><strong>“你能做什么？” (What can you do?)</strong><br>判断已认证的用户是否有权执行特定操作或访问特定资源。</td></tr><tr><td style="text-align:left;"><strong>具体任务</strong></td><td style="text-align:left;"><ul><li><strong>拦截所有外部请求</strong>：作为系统的唯一入口，对所有流量进行统一管控。</li><li><strong>用户身份认证 (Authentication)</strong>：校验请求中携带的凭证（如 JWT Token、Session ID 等）的合法性。这包括检查签名是否正确、是否过期等。</li><li><strong>拒绝非法请求</strong>：对于未通过认证的请求，直接在网关层拦截，不允许其进入内部服务网络，保护后端服务。</li><li><strong>粗粒度授权 (Coarse-Grained Authorization)</strong>：基于令牌中包含的角色信息，进行初步的、基于 URL 路径的访问控制。例如，判断用户是否具备访问某个微服务的基本角色（如 <code>ROLE_ADMIN</code> 才能访问 <code>/system/**</code>） 。</li><li><strong>用户信息传递</strong>：认证通过后，解析令牌中的用户信息（如用户ID、用户名、角色列表），并将其安全地放入请求头中，转发给下游微服务。</li></ul></td><td style="text-align:left;"><ul><li><strong>信任网关</strong>：信任经过网关转发过来的请求，默认其用户身份已经过认证。</li><li><strong>解析用户信息</strong>：从请求头中获取由网关传递过来的用户信息。</li><li><strong>细粒度授权 (Fine-Grained Authorization)</strong>：执行具体的业务权限判断。这通常在代码层面通过注解（如 <code>@PreAuthorize</code>）或AOP实现。</li><li><strong>方法级别权限</strong>：控制用户是否有权调用某个 Controller 方法。例如，<code>@PreAuthorize(&quot;hasAuthority(&#39;sys:user:add&#39;)&quot;)</code>，只有具备 <code>sys:user:add</code> 权限的用户才能新增用户。</li><li><strong>数据级别权限</strong>：根据业务逻辑，控制用户对数据的访问范围。例如，在订单服务中，普通用户只能查询自己的订单，而不能查看他人的订单。这需要业务代码结合用户ID进行逻辑判断。</li></ul></td></tr><tr><td style="text-align:left;"><strong>推荐技术/实现</strong></td><td style="text-align:left;"><ul><li><code>Spring Cloud Gateway</code></li><li><code>Spring Security</code></li><li>全局过滤器 (GlobalFilter)</li><li>JWT (JSON Web Tokens) 解析与校验 </li><li>OAuth2/OIDC 客户端集成</li></ul></td><td style="text-align:left;"><ul><li><code>Spring Security</code></li><li>OAuth2 资源服务器 (<code>spring-boot-starter-oauth2-resource-server</code>) </li><li>方法级安全注解 (<code>@PreAuthorize</code>, <code>@PostAuthorize</code>)</li><li>AOP (面向切面编程) 用于实现复杂的数据权限</li></ul></td></tr><tr><td style="text-align:left;"><strong>优势</strong></td><td style="text-align:left;"><ul><li><strong>安全边界清晰</strong>：将认证逻辑集中处理，形成一道坚固的防线。</li><li><strong>性能提升</strong>：业务服务无需重复执行 Token 签名校验等耗时操作，只需关注自身业务逻辑。</li><li><strong>解耦与简化</strong>：业务服务与认证方式解耦，可以独立演进。</li></ul></td><td style="text-align:left;"><ul><li><strong>业务逻辑内聚</strong>：权限控制与业务逻辑紧密结合，实现更精确、更灵活的访问控制。</li><li><strong>职责单一</strong>：服务只关心自身的授权逻辑，无需关心用户是如何被认证的。</li><li><strong>遵循最小权限原则</strong>：确保即使用户通过了网关，也只能在业务服务中执行其被明确授予的操作。</li></ul></td></tr></tbody></table><h3 id="总结与流程" tabindex="-1">总结与流程 <a class="header-anchor" href="#总结与流程" aria-label="Permalink to &quot;总结与流程&quot;">​</a></h3><p>一个典型的请求处理流程如下：</p><ol><li><strong>客户端</strong>携带 Token 向 API Gateway 发起请求。</li><li><strong>API Gateway</strong> 上的全局安全过滤器拦截请求，校验 Token 的有效性（签名、有效期等）。</li><li>如果 Token 无效，Gateway 直接响应 401 Unauthorized 错误。</li><li>如果 Token 有效，Gateway 进行粗粒度的路径权限检查。如果用户角色不匹配，可响应 403 Forbidden 错误。</li><li>权限检查通过后，Gateway 从 Token 中解析出用户 ID、角色等信息，放入下游请求的 Header 中。</li><li><strong>业务微服务</strong>（如 <code>order-service</code>）接收到请求，从 Header 中读取用户信息。</li><li>当请求访问需要特定权限的业务方法时（例如，删除订单），Spring Security 的方法级安全注解 <code>@PreAuthorize</code> 会被触发，根据用户信息和预设的权限规则进行判断。</li><li>如果用户权限不足，业务服务将抛出异常，并最终向上返回 403 Forbidden 错误。</li><li>如果权限验证通过，则执行业务逻辑并返回结果。</li></ol><p>这种职责划分模式是当前微服务架构中的主流实践，它在保证系统安全性的同时，也兼顾了架构的清晰度、灵活性和高性能。</p>',12)])])}const p=e(i,[["render",n]]);export{h as __pageData,p as default};
