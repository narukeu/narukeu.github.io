import{_ as i,c as a,o as n,af as l}from"./chunks/framework.CkW8_0d0.js";const r=JSON.parse('{"title":"Node.js 项目开发规范","description":"","frontmatter":{},"headers":[],"relativePath":"articles/frontend-naming-conventions.md","filePath":"articles/frontend-naming-conventions.md","lastUpdated":1756832471000}'),t={name:"articles/frontend-naming-conventions.md"};function e(p,s,h,k,d,o){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="node-js-项目开发规范" tabindex="-1">Node.js 项目开发规范 <a class="header-anchor" href="#node-js-项目开发规范" aria-label="Permalink to &quot;Node.js 项目开发规范&quot;">​</a></h1><p>本规范所指的 &quot;Node.js 项目&quot;，指基于 <code>Vue</code>、<code>React</code>、<code>SolidJS</code>、微信小程序的 Web 前端项目，基于 <code>NestJS</code>、<code>Fastify</code>、<code>Express</code> 的 Web 后端项目，以及其他使用了 <code>Node.js</code> 并且支持 <code>ESLint</code>、<code>Prettier</code> 进行格式化的项目。</p><h2 id="总体要求" tabindex="-1">总体要求 <a class="header-anchor" href="#总体要求" aria-label="Permalink to &quot;总体要求&quot;">​</a></h2><ol><li>使用 <code>pnpm</code> 进行包管理。</li><li>目前所有项目均已经安装了 ESLint 和 Prettier，因此编辑器也要进行如此配置。</li><li>代码缩进为 <code>2</code> 个空格。</li><li>每行字符为 <code>80</code>，多出来的要进行适当的换行处理。</li><li>语句末尾要加分号。</li><li>引号使用双引号。</li><li>编写清晰、有效的注释，解释代码目的、逻辑或重要实现细节。</li><li>尽量使用 <code>const</code> 或 <code>let</code> 声明变量，避免使用 <code>var</code>。优先使用 <code>const</code>，符合 ESLint <code>prefer-const</code> 规则。</li><li>变量、类型、组件、方法不得用汉语拼音特别是拼音缩写。</li><li>换行符为 <code>LF</code>，Git 也要如此设置。</li><li>谨慎使用 <code>any</code> 类型，必须使用时应添加注释说明原因。这符合 ESLint <code>@typescript-eslint/no-explicit-any</code> 和 <code>@typescript-eslint/no-unsafe-assignment</code> 规则。</li><li>ESLint 配置文件必须为 flatConfig 格式，必须添加 <code>prettier</code>、<code>import-x</code> 和 <code>tsdoc</code> 插件。推荐使用下面的基本配置示例（需要配合现代化的TypeScript配置使用）：</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> js </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@eslint/js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createTypeScriptImportResolver } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eslint-import-resolver-typescript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> importX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eslint-plugin-import-x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prettierRecommend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eslint-plugin-prettier/recommended&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tsdoc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eslint-plugin-tsdoc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;globals&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tseslint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;typescript-eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Linter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tseslint.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  js.configs.recommended,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tseslint.configs.recommended,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // tseslint.configs.recommendedTypeChecked,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prettierRecommend,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  importX.flatConfigs.recommended,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  importX.flatConfigs.typescript,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    files: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/**/*.{js,mjs,cjs,ts,mts,cts}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    languageOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ecmaVersion: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2022</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 与 tsconfig target: &quot;ES2022&quot; 保持一致</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      globals: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">globals.browser, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">globals.node },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      parser: tseslint.parser,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      parserOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        project: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./tsconfig.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tsconfigRootDir: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dirname,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        projectService: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      tsdoc,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;@typescript-eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: tseslint.plugin,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;import-x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: importX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;tsdoc/syntax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;warn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;prefer-const&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;warn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;@typescript-eslint/no-unused-vars&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;warn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          argsIgnorePattern: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^_&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          varsIgnorePattern: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^_&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;@typescript-eslint/no-explicit-any&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;warn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;@typescript-eslint/no-unsafe-assignment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;warn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;import-x/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;warn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          groups: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;builtin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;external&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;internal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;parent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;sibling&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;type&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          alphabetize: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            order: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            caseInsensitive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    settings: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;import/resolver-next&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createTypeScriptImportResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // bun: true,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          alwaysTryTypes: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          extensions: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.cjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.cjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.cts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.mts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.tsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Linter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="13"><li>原则上不得使用已经停止维护或长期没有更新的库（如果一个活跃开发的第三方库依赖某个已经停止维护的库，则视情况而定）。</li><li>原则上应使用 <code>es-toolkit</code> <code>radash</code> 等工具库代替 <code>lodash</code> 作为 <code>JS</code> 工具库。但如果开发的项目需要运行在旧的操作系统或旧的 <code>Node.js</code> 环境中，则不适用此规定。</li><li>语法规范为 <code>ES2022+</code>，采用现代化的TypeScript配置，包括严格类型检查、ES模块优先、现代构建工具兼容等设计原则。但如果开发的项目需要运行在旧的操作系统或旧的 <code>Node.js</code> 环境中，则不适用此规定。</li></ol><p>一个基本的 Prettier 配置如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;$schema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://json.schemastore.org/prettierrc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tabWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;singleQuote&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;printWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;trailingComma&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;none&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="16"><li>不得使用 <code>@ts-ignore</code>，必须要使用时（比如说测试用例代码里面要测试错误情况）应该添加说明。</li><li>明确以使用箭头函数为优先，除非确实有使用 <code>function</code> 关键字定义函数的必要。</li></ol><h2 id="typescript-配置规范" tabindex="-1">TypeScript 配置规范 <a class="header-anchor" href="#typescript-配置规范" aria-label="Permalink to &quot;TypeScript 配置规范&quot;">​</a></h2><h3 id="现代化配置原则" tabindex="-1">现代化配置原则 <a class="header-anchor" href="#现代化配置原则" aria-label="Permalink to &quot;现代化配置原则&quot;">​</a></h3><p>本规范推荐采用严格且现代化的 TypeScript 配置，以确保代码质量、类型安全和构建工具兼容性。以下是核心设计原则：</p><h4 id="_1-现代化目标和模块系统" tabindex="-1">1. 现代化目标和模块系统 <a class="header-anchor" href="#_1-现代化目标和模块系统" aria-label="Permalink to &quot;1. 现代化目标和模块系统&quot;">​</a></h4><ul><li><strong>编译目标</strong>：使用 <code>&quot;target&quot;: &quot;ES2022&quot;</code>，支持 top-level await、class fields 等现代特性</li><li><strong>模块系统</strong>：采用 <code>&quot;module&quot;: &quot;ESNext&quot;</code> 配合 <code>&quot;moduleResolution&quot;: &quot;bundler&quot;</code>，专为现代构建工具优化</li><li><strong>模块检测</strong>：使用 <code>&quot;moduleDetection&quot;: &quot;auto&quot;</code>，智能处理 ESM/CommonJS 混合环境</li></ul><h4 id="_2-严格类型检查-强制启用" tabindex="-1">2. 严格类型检查（强制启用） <a class="header-anchor" href="#_2-严格类型检查-强制启用" aria-label="Permalink to &quot;2. 严格类型检查（强制启用）&quot;">​</a></h4><p>以下配置项在所有项目中都应该启用，以确保最高的类型安全：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;exactOptionalPropertyTypes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noImplicitReturns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noFallthroughCasesInSwitch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noUnusedLocals&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noUnusedParameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noImplicitOverride&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noUncheckedIndexedAccess&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;useUnknownInCatchVariables&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>配置说明</strong>：</p><ul><li><code>exactOptionalPropertyTypes</code>: 精确区分 <code>undefined</code> 和未定义属性，提供更严格的类型检查</li><li><code>noUncheckedIndexedAccess</code>: 为索引签名访问添加 <code>undefined</code> 检查，防止运行时错误</li><li><code>useUnknownInCatchVariables</code>: catch 块使用 <code>unknown</code> 类型，遵循现代错误处理最佳实践</li><li><code>noImplicitOverride</code>: 要求显式使用 <code>override</code> 关键字，避免意外覆盖</li></ul><h4 id="_3-模块互操作和兼容性" tabindex="-1">3. 模块互操作和兼容性 <a class="header-anchor" href="#_3-模块互操作和兼容性" aria-label="Permalink to &quot;3. 模块互操作和兼容性&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;esModuleInterop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;allowSyntheticDefaultImports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;forceConsistentCasingInFileNames&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;isolatedModules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;verbatimModuleSyntax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>配置说明</strong>：</p><ul><li><code>isolatedModules</code>: 确保每个文件可独立编译，提高构建工具兼容性</li><li><code>verbatimModuleSyntax</code>: 确保 import/export 语法的严格性，避免模块系统混淆</li><li><code>esModuleInterop</code>: 改善 ES 模块和 CommonJS 模块间的互操作性</li></ul><h4 id="_4-开发体验优化" tabindex="-1">4. 开发体验优化 <a class="header-anchor" href="#_4-开发体验优化" aria-label="Permalink to &quot;4. 开发体验优化&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noErrorTruncation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;skipLibCheck&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;resolveJsonModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;resolvePackageJsonExports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;resolvePackageJsonImports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>配置说明</strong>：</p><ul><li><code>noErrorTruncation</code>: 显示完整的类型错误信息，便于调试和问题定位</li><li><code>resolvePackageJsonExports/Imports</code>: 支持现代包管理器和构建工具的标准</li></ul><h4 id="_5-构建优化配置" tabindex="-1">5. 构建优化配置 <a class="header-anchor" href="#_5-构建优化配置" aria-label="Permalink to &quot;5. 构建优化配置&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;declaration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;declarationMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sourceMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;importHelpers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;removeComments&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;downlevelIteration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_6-monorepo-项目配置-按需启用" tabindex="-1">6. Monorepo 项目配置（按需启用） <a class="header-anchor" href="#_6-monorepo-项目配置-按需启用" aria-label="Permalink to &quot;6. Monorepo 项目配置（按需启用）&quot;">​</a></h4><p>对于 Monorepo 项目，以下配置需要根据项目结构决定是否启用：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;composite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>使用场景</strong>：</p><ul><li><strong>启用情况</strong>：多包项目，需要跨包类型检查和增量编译时启用</li><li><strong>不启用情况</strong>：单体项目或不需要项目引用功能的简单项目</li><li><strong>根目录配置</strong>：Monorepo 根目录应使用项目引用而非直接编译：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;references&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./packages/core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./packages/utils&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="推荐配置模板" tabindex="-1">推荐配置模板 <a class="header-anchor" href="#推荐配置模板" aria-label="Permalink to &quot;推荐配置模板&quot;">​</a></h3><h4 id="单体项目-tsconfig-json" tabindex="-1">单体项目 tsconfig.json <a class="header-anchor" href="#单体项目-tsconfig-json" aria-label="Permalink to &quot;单体项目 tsconfig.json&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;$schema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://json.schemastore.org/tsconfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES2022&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES2022&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOM.Iterable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ES2022.Intl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ESNext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;moduleResolution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;moduleDetection&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;exactOptionalPropertyTypes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noImplicitReturns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noFallthroughCasesInSwitch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noUnusedLocals&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noUnusedParameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noImplicitOverride&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noUncheckedIndexedAccess&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;useUnknownInCatchVariables&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;esModuleInterop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;allowSyntheticDefaultImports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;forceConsistentCasingInFileNames&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;isolatedModules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;verbatimModuleSyntax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;declaration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;declarationMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sourceMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;baseUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;resolveJsonModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;resolvePackageJsonExports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;resolvePackageJsonImports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;skipLibCheck&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;noErrorTruncation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/**/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node_modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="monorepo-基础配置-shared-tsconfig-base-json" tabindex="-1">Monorepo 基础配置 (shared/tsconfig.base.json) <a class="header-anchor" href="#monorepo-基础配置-shared-tsconfig-base-json" aria-label="Permalink to &quot;Monorepo 基础配置 (shared/tsconfig.base.json)&quot;">​</a></h4><p>在 Monorepo 项目中，上述配置应作为基础配置，并添加 <code>&quot;composite&quot;: true</code>。各子包通过 <code>extends</code> 继承基础配置。</p><h2 id="typescript-类型命名" tabindex="-1">TypeScript 类型命名 <a class="header-anchor" href="#typescript-类型命名" aria-label="Permalink to &quot;TypeScript 类型命名&quot;">​</a></h2><h3 id="基础类型命名" tabindex="-1">基础类型命名 <a class="header-anchor" href="#基础类型命名" aria-label="Permalink to &quot;基础类型命名&quot;">​</a></h3><ul><li>Interface: 使用 PascalCase（如 <code>UserConfig</code>, <code>ApiResponse</code>, <code>DatabaseConnection</code>） <ul><li><strong>如果接口为公共或基础接口，建议在名称中包含 <code>Base</code> 或 <code>Public</code> 字样</strong>（如 <code>BaseOptions</code>, <code>PublicFormDataType</code>）</li></ul></li><li>Type: 使用 PascalCase（如 <code>BuildMode</code>, <code>AssetInfo</code>, <code>LoaderResult</code>）</li><li>Enum：使用 PascalCase（如 <code>UserStatus</code>, <code>ApiEndpoint</code>, <code>ErrorCode</code>）</li><li>Enum 成员：使用 UPPER_SNAKE_CASE（如 <code>ACTIVE</code>, <code>INACTIVE</code>, <code>PENDING</code>）</li></ul><h3 id="泛型命名" tabindex="-1">泛型命名 <a class="header-anchor" href="#泛型命名" aria-label="Permalink to &quot;泛型命名&quot;">​</a></h3><ul><li>简单泛型：使用单个大写字母，从 T 开始（如 <code>T</code>, <code>U</code>, <code>K</code>, <code>V</code>）</li><li>复杂泛型：使用 PascalCase 组合词（如 <code>TResultData</code>, <code>TRequestOptions</code>）</li><li>集合类泛型：可使用复数形式（如 <code>TItems</code>, <code>TEntities</code>）</li><li>约束泛型：使用有意义的名称表达约束关系（如 <code>TEntity extends BaseEntity</code>）</li></ul><h3 id="函数类型" tabindex="-1">函数类型 <a class="header-anchor" href="#函数类型" aria-label="Permalink to &quot;函数类型&quot;">​</a></h3><ul><li>函数类型表达式：使用描述性 PascalCase（如 <code>EventHandler</code>, <code>DataValidator</code>, <code>AsyncProcessor</code>）</li><li>回调函数类型：以用途命名（如 <code>OnChangeCallback</code>, <code>ErrorHandler</code>）</li></ul><h3 id="高级类型" tabindex="-1">高级类型 <a class="header-anchor" href="#高级类型" aria-label="Permalink to &quot;高级类型&quot;">​</a></h3><ul><li>映射类型：使用 PascalCase，体现转换关系（如 <code>Partial&lt;T&gt;</code>, <code>ReadonlyKeys&lt;T&gt;</code>）</li><li>条件类型：使用 PascalCase，体现条件逻辑（如 <code>ApiResult&lt;T&gt;</code>, <code>NonNullable&lt;T&gt;</code>）</li><li>工具类型：使用 PascalCase（如 <code>DeepPartial&lt;T&gt;</code>, <code>KeysOfType&lt;T, U&gt;</code>）</li></ul><h3 id="模块和命名空间" tabindex="-1">模块和命名空间 <a class="header-anchor" href="#模块和命名空间" aria-label="Permalink to &quot;模块和命名空间&quot;">​</a></h3><ul><li>命名空间：使用 PascalCase（如 <code>Utils</code>, <code>ConfigParser</code>, <code>ApiClient</code>）</li><li>模块声明：使用 PascalCase（如 <code>declare module &#39;CustomModule&#39;</code>）</li></ul><h3 id="类型组合原则" tabindex="-1">类型组合原则 <a class="header-anchor" href="#类型组合原则" aria-label="Permalink to &quot;类型组合原则&quot;">​</a></h3><ul><li>Interface 主要用于对象结构描述，支持声明合并和继承</li><li>Type 适合联合类型、交叉类型、条件类型等复杂场景</li><li>优先使用 Interface 定义对象结构，Type 定义计算类型</li><li>索引签名应明确包含 undefined 类型（配合 <code>noUncheckedIndexedAccess</code>）</li></ul><h2 id="代码命名规范" tabindex="-1">代码命名规范 <a class="header-anchor" href="#代码命名规范" aria-label="Permalink to &quot;代码命名规范&quot;">​</a></h2><ul><li>常量: 使用 UPPER_SNAKE_CASE（如 <code>DEFAULT_PORT</code>, <code>MAX_THREADS</code>, <code>BUILD_TIMEOUT</code>），全局常量建议加模块前缀（如 <code>BUILD_DEFAULT_PORT</code>）。</li><li>私有方法: 使用 <code>_</code> 前缀（如 <code>_processModule</code>, <code>_handleError</code>, <code>_validateConfig</code>）。</li><li>类名: 使用 PascalCase（如 <code>Compiler</code>, <code>DevServer</code>, <code>AssetLoader</code>）。 <ul><li><strong>如果类为基础类或公共基类，建议名称中包含 <code>Base</code> 或 <code>Abstract</code> 字样</strong>（如 <code>BaseController</code>, <code>AbstractService</code>），便于识别继承体系。</li></ul></li><li>函数/变量: 使用 camelCase（如 <code>buildProject</code>, <code>configPath</code>, <code>moduleInfo</code>）。 <ul><li><strong>不限制名称长度，推荐根据实际用途使用有意义且描述性强的长名称</strong>，如 <code>getUserProfileByIdAsync</code>、<code>defaultUserAvatarUrl</code>，好的名字比注释更直观。</li></ul></li><li>未使用的参数和变量: 使用 <code>_</code> 前缀，防止产生歧义和 ESLint 警告（如 <code>array.map((_item, index) =&gt; index * 2)</code>）。当只用第二或后续参数时，前面未用参数也应加 <code>_</code> 前缀。这符合 ESLint <code>@typescript-eslint/no-unused-vars</code> 规则的 <code>argsIgnorePattern</code> 和 <code>varsIgnorePattern</code> 配置。</li><li>文件名: 使用 kebab-case（如 <code>build-config.ts</code>, <code>dev-server.ts</code>, <code>asset-loader.ts</code>），避免与保留字、已有 npm 包重名。</li><li>目录名: 使用 kebab-case（如 <code>build-tools/</code>, <code>config-parser/</code>, <code>utils/</code>），避免单字符目录名。</li><li>测试文件命名： <ul><li>单元测试文件建议以 <code>.spec.ts</code> 结尾（如 <code>math-utils.spec.ts</code>），用于测试单个函数、类、模块的行为。</li><li>集成测试或端到端测试文件建议以 <code>.test.ts</code> 结尾（如 <code>api-integration.test.ts</code>），用于测试多个模块协作或完整业务流程。</li></ul></li><li>缩写统一大写（如 <code>APIClient</code>, <code>HTMLParser</code>），避免 <code>ApiClient</code>、<code>HtmlParser</code> 等写法，且避免无意义缩写。</li><li>异步函数建议以 Async 结尾或用动词前缀（如 <code>fetchDataAsync</code>, <code>getUserInfo</code>）。</li><li>React 组件名用 PascalCase，hooks 用 use 前缀（如 <code>useUserInfo</code>）。</li><li>类型守卫函数统一用 isXxx 命名（如 <code>isString</code>）。</li><li>变量声明一行一个（如 <code>const a = 1; const b = 2;</code>），避免 <code>let a = 1, b = 2;</code>。</li><li>花括号、缩进等风格细节可参考微软官方规范。</li></ul><h2 id="布尔值命名规范" tabindex="-1">布尔值命名规范 <a class="header-anchor" href="#布尔值命名规范" aria-label="Permalink to &quot;布尔值命名规范&quot;">​</a></h2><ul><li>使用 <code>is</code>, <code>has</code>, <code>can</code>, <code>should</code>, <code>will</code> 等前缀（如 <code>isLoading</code>, <code>hasError</code>, <code>canBuild</code>, <code>shouldOptimize</code>），避免 <code>isNotX</code>、<code>flagX</code> 等反模式，布尔变量应表达正向含义。</li><li>控制对话框、抽屉、下拉框等组件显示状态的变量名也要遵循上面的规范。</li></ul><h2 id="事件和回调命名" tabindex="-1">事件和回调命名 <a class="header-anchor" href="#事件和回调命名" aria-label="Permalink to &quot;事件和回调命名&quot;">​</a></h2><ul><li>事件处理函数: 使用 <code>handle</code> 或 <code>on</code> 前缀（如 <code>handleClick</code>, <code>onFileChange</code>），事件名用 PascalCase（如 <code>onUserLogin</code>）。</li><li>回调函数: 使用描述性动词（如 <code>onComplete</code>, <code>onError</code>, <code>beforeBuild</code>），回调参数用 <code>event</code> 结尾（如 <code>onChangeEvent</code>）。</li></ul><h2 id="模块导出命名" tabindex="-1">模块导出命名 <a class="header-anchor" href="#模块导出命名" aria-label="Permalink to &quot;模块导出命名&quot;">​</a></h2><ul><li>默认导出: 使用文件主要功能的名称</li><li>命名导出: 使用具体的功能名称</li><li>重新导出: 保持原有命名或使用 <code>as</code> 重命名以避免冲突</li><li>模块导入应按照以下顺序进行分组（遵循 ESLint <code>import-x/order</code> 规则）： <ol><li>Node.js 内置模块 (<code>builtin</code>)</li><li>外部库 (<code>external</code>)</li><li>内部模块 (<code>internal</code>)</li><li>未知模块 (<code>unknown</code>)</li><li>父级目录模块 (<code>parent</code>)</li><li>同级目录模块 (<code>sibling</code>)</li><li>索引文件 (<code>index</code>)</li><li>对象导入 (<code>object</code>)</li><li>类型导入 (<code>type</code>)</li></ol></li><li>每个分组内按字母顺序排列，区分大小写</li></ul><h2 id="注释规范" tabindex="-1">注释规范 <a class="header-anchor" href="#注释规范" aria-label="Permalink to &quot;注释规范&quot;">​</a></h2><ul><li>测试描述（describe/it）用英文，表达行为和预期结果。</li><li>类型断言建议谨慎使用，优先类型收窄。</li><li>代码注释建议用 TSDoc 风格，除非这个模块不用 TS 而用 JS。TSDoc 注释应符合 <code>tsdoc/syntax</code> 规则，包括： <ul><li>使用 <code>/**</code> 开始多行注释</li><li>使用标准的 TSDoc 标签如 <code>@param</code>、<code>@returns</code>、<code>@example</code> 等</li><li>避免无效的标签组合和语法错误</li><li>示例：<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 计算两个数的和</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 第一个数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 第二个数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 两个数的和</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@example</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * \`\`\`typescript</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * const result = add(1, 2);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 返回 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * \`\`\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ul><h2 id="前端项目通用规范" tabindex="-1">前端项目通用规范 <a class="header-anchor" href="#前端项目通用规范" aria-label="Permalink to &quot;前端项目通用规范&quot;">​</a></h2><ol><li>一个页面中用到的多个组件不得放在同一文件中。</li><li>凡是封装的公共组件，组件文件的统一目录下，应该要有一个 README.md 说明文件，布局文件除外。</li><li>进行删除操作的时候应当有确认。</li><li>如果使用的组件库的表格组件支持无分页的虚拟滚动功能，则无需进行分页设置。</li><li>封装公共组件时应当将组件本体和组件 props 类型分离，例如，要封装一个 <code>CommonInput</code> 的 Vue 组件，该组件所在目录下应该是这个样子：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- index.ts</span></span>
<span class="line"><span>- common-input.vue</span></span>
<span class="line"><span>- types.ts</span></span></code></pre></div><p>其中，index.ts 内容如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CommonInput } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./common-input.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="6"><li>对于采用 Vite、Webpack、Next.js 构建的项目，必须设置路径前缀 <code>@</code>，并确保与推荐的TypeScript配置兼容： <code>vite.config.ts</code>：</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fileURLToPath, URL } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;node:url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alias: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;@&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fileURLToPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><code>tsconfig.app.json</code>（继承基础配置）：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./tsconfig.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;baseUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;paths&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;@/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="7"><li>对于复杂状态，应当考虑使用状态管理库进行统一管理，也要对这些状态进行持久化存储。</li><li>可以对 localStorage 进行封装。</li><li>【适用于微信小程序，以及采用了文件系统路由的项目】关于页面的命名，如果 y 包含两个以上单词时，应当使用短横线 <code>-</code> 连接，比如：<code>user-list</code>。不要使用小驼峰命名。</li><li>主表页面的列配置（columns）应当放在单独的 JS/TS 文件中，因为有些地方可能需要复用这些列配置。</li><li>路由中组件应该使用懒加载导入。</li><li>业务模块的编辑表单组件应与主表组件分开存放，不得放在同一文件中。</li></ol><h2 id="css-规范" tabindex="-1">CSS 规范 <a class="header-anchor" href="#css-规范" aria-label="Permalink to &quot;CSS 规范&quot;">​</a></h2><ol><li>如果一个项目中没有使用 Tailwind CSS，那么应当使用 <code>less</code> 或者 <code>scss</code> 作为 CSS 预处理器。</li><li>CSS 命名基于 BEM 规范。</li><li>为了进行样式隔离，组件中要导入的样式必须使用 CSS Module 进行导入。</li></ol><h2 id="vue-项目规范" tabindex="-1">Vue 项目规范 <a class="header-anchor" href="#vue-项目规范" aria-label="Permalink to &quot;Vue 项目规范&quot;">​</a></h2><ol><li><p>基于 Vue 3 的项目必须使用 TypeScript。</p></li><li><p>在 Vue 组件中，必须采用组合式 API（Composition API）进行逻辑组织。</p></li><li><p>组件的样式应该存放在 <code>index.{css,less,scss}</code> 中，组件的样式应该与组件名保持一致。</p></li><li><p>当组件定义的数据较多时，应该把所有组件数据定义在 <code>pageData</code> 这个响应式对象之下，比如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pageData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loading: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tableData: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  selectedRow: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  selectedRowId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  showEditForm: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  editFormMode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><p>若在 JavaScript 部分遇到需要使用 JSX 语法渲染的情况（如主表列配置），应将其单独提取到合适的位置。</p></li><li><p>主表的按钮配置应以 计算属性 形式实现。</p></li><li><p>Vue 3 项目的状态管理库使用 <code>pinia</code>，持久化使用 <code>pinia-plugin-persistedstate</code>。</p></li><li><p>当导入的组件比较复杂或者打包时出现了 JS 体积较大的情况，应当使用 <code>defineAsyncComponent</code>，这样可以优化性能以及减少单个 JS 体积。</p></li><li><p>集成 <code>vite-plugin-vue-devtools</code>。</p></li><li><p>编辑表单组件（EditForm.vue）应当异步加载：<code>const EditForm = defineAsyncComponent(() =&gt; import(&quot;./components/EditForm.vue&quot;));</code>。</p></li><li><p>表选择组件（SelectTable）也应当异步加载。</p></li><li><p>使用 <code>withDefaults(defineProps&lt;IComponentProps&gt;(), {})</code> 去定义组件的 props：</p></li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按照 import-x/order 规则排序导入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { withDefaults, defineProps } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IDialogProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  overLayZIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  zIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  visible</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  theme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  confirmBtn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  cancelBtn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;normal&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;large&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> withDefaults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDialogProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(), {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  overLayZIndex: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2499</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  zIndex: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  visible: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  theme: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  size: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;normal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;50%&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="13"><li>使用 <code>&lt;script setup&gt;</code> 语法糖，避免 Options API。</li><li>合理使用 <code>computed</code> 和 <code>watch</code>，避免不必要的重新计算。</li><li>组件事件使用 <code>defineEmits</code> 定义，确保类型安全。</li><li>使用 <code>Teleport</code> 组件处理模态框、通知等需要在 DOM 树特定位置渲染的组件。</li><li>避免在模板中进行复杂计算，将逻辑提取到计算属性或方法中。</li></ol><h2 id="react-项目规范" tabindex="-1">React 项目规范 <a class="header-anchor" href="#react-项目规范" aria-label="Permalink to &quot;React 项目规范&quot;">​</a></h2><ol><li><p>基于 React 16+ 的项目必须使用 TypeScript。</p></li><li><p>基于 React 16+ 的项目应当使用函数式组件，简化组件生命周期管理。</p></li><li><p>对于非 SSR 的项目，状态管理库使用 <code>zustand</code> 或 <code>redux</code>。</p></li><li><p>在定义组件时，应严格声明 <code>prop</code> 的类型并据此使用。建议将接收 props 的参数统一命名为 <code>props</code>。对于函数式组件，应利用 <code>React.FC</code> 来指定组件的返回类型，确保类型安全及代码的一致性。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { FC, ReactNode } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IAuthCardProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReactNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReactNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthCard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IAuthCardProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此处省略 500 字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li><p>较为复杂的状态，应当使用 <code>useReducer</code> 进行管理。</p></li><li><p>使用 React.memo 包装纯组件以优化性能。</p></li><li><p>合理使用 useMemo 和 useCallback 避免不必要的重新渲染。</p></li><li><p>使用 React.lazy 和 Suspense 实现组件懒加载。</p></li><li><p>错误边界（Error Boundaries）用于捕获和处理组件错误。</p></li><li><p>使用 useEffect 的依赖数组时，确保包含所有依赖项。</p></li><li><p>自定义 Hook 应以 <code>use</code> 开头，复用组件逻辑。</p></li><li><p>使用 Context API 共享全局状态，避免 prop drilling。</p></li><li><p>对于表单处理，推荐使用 <code>react-hook-form</code> 或 <code>formik</code>。</p></li><li><p>使用 <code>react-use</code> 作为 hook 工具库。</p></li></ol><h2 id="solidjs-项目规范" tabindex="-1">SolidJS 项目规范 <a class="header-anchor" href="#solidjs-项目规范" aria-label="Permalink to &quot;SolidJS 项目规范&quot;">​</a></h2><ol><li>必须使用 TypeScript。</li><li>使用 SolidJS 的细粒度响应式系统，避免不必要的重新渲染。</li><li>使用 <code>createSignal</code> 创建响应式状态。</li><li>使用 <code>createMemo</code> 创建派生状态，类似于 Vue 的计算属性。</li><li>使用 <code>createEffect</code> 处理副作用。</li><li>组件应为函数组件，使用 JSX 语法。</li><li>使用 <code>Show</code>、<code>For</code>、<code>Switch</code> 等控制流组件替代条件渲染。</li><li>状态管理使用 SolidJS Store 或第三方库如 <code>solid-zustand</code>。</li><li>路由使用 <code>@solidjs/router</code>。</li><li>样式使用 CSS Modules 或 styled-components。</li><li>使用 <code>createResource</code> 处理异步数据获取。</li><li>合理使用 <code>batch</code> 批量更新状态。</li><li>使用 <code>onMount</code> 和 <code>onCleanup</code> 处理组件生命周期。</li></ol><h2 id="工具库开发规范" tabindex="-1">工具库开发规范 <a class="header-anchor" href="#工具库开发规范" aria-label="Permalink to &quot;工具库开发规范&quot;">​</a></h2><ol><li>函数应该是纯函数，尽量避免副作用。</li><li>提供完整的 TypeScript 类型定义，遵循严格的类型检查配置。</li><li>函数命名应该清晰表达其功能。</li><li>提供详细的 TSDoc 文档。</li><li>支持树摇（tree-shaking），每个函数独立导出。</li><li>错误处理应该一致且可预测，遵循 <code>useUnknownInCatchVariables</code> 原则。</li><li>支持链式调用（如果适用）。</li><li>避免依赖过多的第三方库。</li><li>原则上可以只提供 ESM 格式，除非有需求必须要兼容 CommonJS 和 UMD。配置应启用 <code>isolatedModules</code> 和 <code>verbatimModuleSyntax</code> 确保模块兼容性。</li></ol><h2 id="微信小程序项目规范" tabindex="-1">微信小程序项目规范 <a class="header-anchor" href="#微信小程序项目规范" aria-label="Permalink to &quot;微信小程序项目规范&quot;">​</a></h2><ol><li>尽量使用 TypeScript。</li><li>不要使用模板里自带的 <code>typings</code> 作为小程序项目的 TS 类型定义，删掉，用 pnpm 安装 <code>miniprogram-api-typings</code> 然后配置 tsconfig.json 使用。</li><li>小程序有的时候需要用到列表页面，当列表数量过多的时候应该使用分页，后端也要做配合。</li><li>为了方便维护起见，小程序源码目录和项目根目录应当为同一层级（也为了方便 npm）。</li><li>小程序体积有限，不应该引入过多的库，当项目功能过多的时候应该使用分包。</li><li>使用 <code>wx.cloud</code> 云开发时，应合理规划数据库结构。</li><li>使用小程序原生组件时，注意性能优化，避免频繁的 setData。</li><li>图片资源应该压缩，使用 webp 格式。</li><li>合理使用小程序的生命周期钩子。</li></ol><h2 id="node-js-后端项目规范" tabindex="-1">Node.js 后端项目规范 <a class="header-anchor" href="#node-js-后端项目规范" aria-label="Permalink to &quot;Node.js 后端项目规范&quot;">​</a></h2><h3 id="nestjs-项目规范" tabindex="-1">NestJS 项目规范 <a class="header-anchor" href="#nestjs-项目规范" aria-label="Permalink to &quot;NestJS 项目规范&quot;">​</a></h3><ol><li><p>必须使用 TypeScript，采用严格的类型检查配置，包括 <code>exactOptionalPropertyTypes</code>、<code>noUncheckedIndexedAccess</code> 等现代化选项。</p></li><li><p>以 <code>前端便利性</code> 为导向设计接口，减少前端调用次数，提升用户体验。接口应尽可能返回丰富且关联的数据。</p></li><li><p>尽量使用 <code>@nestjs/common</code> 中的 <code>HttpException</code> 抛出异常。</p></li><li><p>增加新的路由的时候，应该配置好 <code>Swagger</code>，比如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ApiOperation,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ApiQuery</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@nestjs/swagger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ClassSerializerInterceptor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Get,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  UseGuards,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  UseInterceptors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@nestjs/common&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CheckAdminGuard } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./guards/check-admin.guard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApiOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ summary: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;获取单一用户信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApiQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;findOne&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UseGuards</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CheckAdminGuard)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UseInterceptors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ClassSerializerInterceptor)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() query: { id: string }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.userService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query.id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>DTO 中也要设置好 @ApiProperty</strong>。</p></li><li><p>后端应该对前端传来的数据进行第二次的校验，校验不通过的时候应当抛出异常。</p></li><li><p><code>findAll</code> 接口不得做分页，如果需要做一个分页查询的接口，请定义名为 <code>findList</code> 的接口。</p></li><li><p>文件下载接口应该做鉴权和流式传输功能，并且要分片下载。如果项目采用了云服务商的对象存储，为了提升用户体验，可以采用获取临时密钥的方式，让用户直接访问云服务商的对象存储。</p></li><li><p>使用 <code>class-validator</code> 和 <code>class-transformer</code> 进行数据验证和转换。</p></li><li><p>使用依赖注入（DI）管理服务和模块间的依赖关系。</p></li><li><p>合理使用中间件、拦截器、守卫和过滤器。</p></li><li><p>数据库操作使用 TypeORM 或 Prisma，避免直接写 SQL。</p></li><li><p>环境变量使用 <code>@nestjs/config</code> 管理。</p></li><li><p>日志使用内置的 Logger 或集成 winston。</p></li><li><p>单元测试和集成测试使用 Jest。</p></li><li><p>使用 <code>helmet</code> 增强安全性。</p></li><li><p>适配器优先使用 <code>Fastify</code> 而不是 <code>Express</code></p></li></ol><h3 id="fastify-项目规范" tabindex="-1">Fastify 项目规范 <a class="header-anchor" href="#fastify-项目规范" aria-label="Permalink to &quot;Fastify 项目规范&quot;">​</a></h3><ol><li><p>必须使用 TypeScript，配置应包含严格的类型检查和现代化的编译选项。</p></li><li><p>使用 Fastify 的插件系统组织代码。</p></li><li><p>路由定义使用 TypeScript 接口确保类型安全：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IUserQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IUserReply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fastify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IUserQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Reply</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IUserReply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }&gt;(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 实现逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li><li><p>使用 <code>@fastify/env</code> 管理环境变量。</p></li><li><p>使用 <code>@fastify/cors</code> 处理跨域请求。</p></li><li><p>使用 <code>fastify-plugin</code> 封装插件。</p></li><li><p>错误处理使用 Fastify 的错误处理机制。</p></li><li><p>数据验证使用 JSON Schema。</p></li><li><p>日志使用 Fastify 内置的日志系统。</p></li><li><p>测试使用 <code>tap</code> 或 <code>jest</code>。</p></li></ol><h3 id="express-项目规范" tabindex="-1">Express 项目规范 <a class="header-anchor" href="#express-项目规范" aria-label="Permalink to &quot;Express 项目规范&quot;">​</a></h3><ol><li>推荐使用 TypeScript。</li><li>使用 Express Router 组织路由。</li><li>中间件应该是纯函数，避免副作用。</li><li>错误处理中间件应该放在所有路由之后。</li><li>使用 <code>helmet</code> 增强安全性。</li><li>使用 <code>cors</code> 处理跨域请求。</li><li>环境变量使用 <code>dotenv</code> 管理。</li><li>数据验证使用 <code>joi</code> 或 <code>express-validator</code>。</li><li>日志使用 <code>winston</code> 或 <code>morgan</code>。</li><li>测试使用 <code>jest</code> 和 <code>supertest</code>。</li></ol><h2 id="测试规范" tabindex="-1">测试规范 <a class="header-anchor" href="#测试规范" aria-label="Permalink to &quot;测试规范&quot;">​</a></h2><h3 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h3><ol><li>测试文件命名为 <code>*.spec.ts</code> 或 <code>*.test.ts</code>。</li><li>测试描述使用英文，清晰表达测试意图。</li><li>使用 AAA 模式：Arrange（准备）、Act（执行）、Assert（断言）。</li><li>每个测试应该独立，不依赖其他测试的结果。</li><li>使用 <code>describe</code> 分组相关测试。</li><li>Mock 外部依赖，专注测试当前单元。</li><li>测试覆盖率应该达到 80% 以上。</li></ol><h3 id="集成测试" tabindex="-1">集成测试 <a class="header-anchor" href="#集成测试" aria-label="Permalink to &quot;集成测试&quot;">​</a></h3><ol><li>测试真实的数据库连接和 API 调用。</li><li>使用测试数据库，避免污染生产数据。</li><li>测试完整的业务流程。</li><li>清理测试数据，确保测试环境干净。</li></ol><h3 id="e2e-测试" tabindex="-1">E2E 测试 <a class="header-anchor" href="#e2e-测试" aria-label="Permalink to &quot;E2E 测试&quot;">​</a></h3><ol><li>使用 Playwright 或 Cypress 进行端到端测试。</li><li>测试关键用户路径。</li><li>使用 Page Object 模式组织测试代码。</li><li>考虑并发测试，确保测试稳定性。</li></ol><h2 id="性能优化规范" tabindex="-1">性能优化规范 <a class="header-anchor" href="#性能优化规范" aria-label="Permalink to &quot;性能优化规范&quot;">​</a></h2><h3 id="前端性能优化" tabindex="-1">前端性能优化 <a class="header-anchor" href="#前端性能优化" aria-label="Permalink to &quot;前端性能优化&quot;">​</a></h3><ol><li>使用代码分割（Code Splitting）减少初始包大小。</li><li>图片使用懒加载和适当的格式（WebP、AVIF）。</li><li>使用 CDN 加速静态资源。</li><li>启用 Gzip/Brotli 压缩。</li><li>使用 Service Worker 实现离线缓存。</li><li>避免内存泄漏，及时清理事件监听器。</li><li>使用 Web Workers 处理计算密集型任务。</li><li>合理使用缓存策略。</li></ol><h3 id="后端性能优化" tabindex="-1">后端性能优化 <a class="header-anchor" href="#后端性能优化" aria-label="Permalink to &quot;后端性能优化&quot;">​</a></h3><ol><li>数据库查询优化，使用索引。</li><li>使用连接池管理数据库连接。</li><li>实现 API 缓存策略（Redis、内存缓存）。</li><li>使用压缩中间件减少响应体积。</li><li>实现请求限流和防护措施。</li><li>监控性能指标，及时发现问题。</li><li>使用 CDN 分发静态内容。</li><li>数据库读写分离，提高并发能力。</li></ol><h2 id="安全规范" tabindex="-1">安全规范 <a class="header-anchor" href="#安全规范" aria-label="Permalink to &quot;安全规范&quot;">​</a></h2><h3 id="前端安全" tabindex="-1">前端安全 <a class="header-anchor" href="#前端安全" aria-label="Permalink to &quot;前端安全&quot;">​</a></h3><ol><li>输入验证和输出编码防止 XSS 攻击。</li><li>使用 HTTPS 传输敏感数据。</li><li>实施内容安全策略（CSP）。</li><li>避免在客户端存储敏感信息。</li><li>使用 SRI（子资源完整性）验证外部资源。</li><li>定期更新依赖包，修复安全漏洞。</li></ol><h3 id="后端安全" tabindex="-1">后端安全 <a class="header-anchor" href="#后端安全" aria-label="Permalink to &quot;后端安全&quot;">​</a></h3><ol><li>使用参数化查询防止 SQL 注入。</li><li>实施适当的身份验证和授权机制。</li><li>使用 CORS 控制跨域访问。</li><li>限制请求频率，防止 DDoS 攻击。</li><li>验证和清理用户输入。</li><li>使用安全的会话管理。</li><li>记录安全相关的日志。</li><li>定期进行安全审计和渗透测试。</li></ol>`,111)])])}const c=i(t,[["render",e]]);export{r as __pageData,c as default};
