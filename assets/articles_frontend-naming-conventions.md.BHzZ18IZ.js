import{_ as e,c as t,o as c,af as r}from"./chunks/framework.CkW8_0d0.js";const h=JSON.parse('{"title":"代码命名与风格规范","description":"","frontmatter":{},"headers":[],"relativePath":"articles/frontend-naming-conventions.md","filePath":"articles/frontend-naming-conventions.md","lastUpdated":1758728399000}'),i={name:"articles/frontend-naming-conventions.md"};function l(s,o,a,n,d,g){return c(),t("div",null,[...o[0]||(o[0]=[r('<h1 id="代码命名与风格规范" tabindex="-1">代码命名与风格规范 <a class="header-anchor" href="#代码命名与风格规范" aria-label="Permalink to &quot;代码命名与风格规范&quot;">​</a></h1><p>本规范旨在统一项目在各类 JavaScript/TypeScript 项目中的代码命名与编码风格，确保代码的一致性、可读性和可维护性。</p><h2 id="_1-代码格式化与质量工具" tabindex="-1">1. 代码格式化与质量工具 <a class="header-anchor" href="#_1-代码格式化与质量工具" aria-label="Permalink to &quot;1. 代码格式化与质量工具&quot;">​</a></h2><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><p>自 2025/09/24 之后，所有的新建项目使用 <code>BiomeJS</code> 作为唯一的代码格式化和质量检查工具，除非特殊需要，新的项目不再使用 <code>Eslint + Prettier</code> 作为代码格式化和质量检查工具。 现有的使用了 <code>Eslint + Prettier</code> 项目暂时不迁移。</p></div><ul><li><strong>统一工具</strong>：所有项目必须使用 <code>BiomeJS</code> 作为代码格式化、风格检查（Lint）和导入排序的唯一工具。</li><li><strong>统一配置</strong>：所有规则均由仓库根目录下的 <code>biome.jsonc</code> 文件集中管理，确保开发、CI/CD 等所有环节的行为一致。</li></ul><h3 id="配置样例" tabindex="-1">配置样例 <a class="header-anchor" href="#配置样例" aria-label="Permalink to &quot;配置样例&quot;">​</a></h3><ul><li><p><a href="/codes/biomejs-config.html">BiomeJS 配置样例</a></p></li><li><p><a href="/codes/eslint-flat-config.html">Eslint 配置样例（旧）</a></p></li></ul><h2 id="_2-格式规则" tabindex="-1">2. 格式规则 <a class="header-anchor" href="#_2-格式规则" aria-label="Permalink to &quot;2. 格式规则&quot;">​</a></h2><p>以下格式规则无论使用 <code>BiomeJS</code> 还是 <code>Eslint + Prettier</code>，均保持一致。</p><ul><li><strong>缩进</strong>：使用 <strong>2 个空格</strong>进行缩进。</li><li><strong>最大行宽</strong>：<strong>80 个字符</strong> 。</li><li><strong>分号</strong>：所有语句末尾<strong>必须</strong>添加分号。</li><li><strong>引号</strong>：统一使用<strong>双引号</strong> 。此规则同样适用于 JSX 属性。</li><li><strong>结尾逗号</strong>：在多行数组、对象等结构的最后一个元素后，<strong>必须</strong>添加逗号。</li><li><strong>箭头函数参数</strong>：箭头函数的参数<strong>始终</strong>使用括号包裹，即使只有一个参数。</li><li><strong>花括号空格</strong>：在对象字面量的花括号内侧保留一个空格（如 <code>{ name: &quot;value&quot; }</code>）。这是 Biome 的默认行为。</li><li><strong>JSX 尖括号换行</strong>：多行 JSX 元素的闭合尖括号 <code>&gt;</code> 不与最后一个属性在同一行。这是 Biome 的默认行为。</li><li><strong>换行符</strong>：统一使用 <strong>LF (<code>\\n</code>)</strong> 。Git 仓库也应配置为在提交时强制使用 LF。</li></ul><h2 id="_3-语法与写法偏好" tabindex="-1">3. 语法与写法偏好 <a class="header-anchor" href="#_3-语法与写法偏好" aria-label="Permalink to &quot;3. 语法与写法偏好&quot;">​</a></h2><ul><li><strong>变量声明</strong>： <ul><li>优先使用 <code>const</code>。对于需要重新赋值的变量，才使用 <code>let</code>。</li><li>若非真的要采用 ES6 以下的语法且不能使用 <code>Babel</code> 这类转译工具转换语法，否则严禁使用 <code>var</code>。</li></ul></li><li><strong>循环方式</strong>：推荐使用 <code>for...of</code> 循环来遍历可迭代对象，而不是传统的 <code>for (let i = 0; ...)</code> 循环。</li><li><strong><code>any</code> 的使用</strong>：谨慎使用 <code>any</code> 类型。必须使用时，应添加注释说明原因。</li><li><strong><code>@ts-ignore</code> 的使用</strong>：严禁使用 <code>@ts-ignore</code>。在测试等极少数确有必要的场景下，必须在其后紧跟一行注释，解释忽略该错误的具体原因及潜在影响。</li></ul><h2 id="_4-导入与导出风格" tabindex="-1">4. 导入与导出风格 <a class="header-anchor" href="#_4-导入与导出风格" aria-label="Permalink to &quot;4. 导入与导出风格&quot;">​</a></h2><h3 id="导入顺序与分组" tabindex="-1">导入顺序与分组 <a class="header-anchor" href="#导入顺序与分组" aria-label="Permalink to &quot;导入顺序与分组&quot;">​</a></h3><p>导入顺序和分组依次为：“内建模块 / 第三方库 / 工作区路径别名 / 本地父级目录 / 本地同级目录 / 类型导入 / 样式与副作用导入”。</p><h3 id="导出风格" tabindex="-1">导出风格： <a class="header-anchor" href="#导出风格" aria-label="Permalink to &quot;导出风格：&quot;">​</a></h3><ul><li><strong>默认导出 (<code>export default</code>)</strong>：用于表达一个文件的核心、单一功能或实体。</li><li><strong>具名导出 (<code>export</code>)</strong>：用于从一个模块中提供多个独立的工具、函数或常量。</li></ul><h2 id="_5-代码命名规范" tabindex="-1">5. 代码命名规范 <a class="header-anchor" href="#_5-代码命名规范" aria-label="Permalink to &quot;5. 代码命名规范&quot;">​</a></h2><p>好的命名有时比注释更有价值，而且更利于 LLM 理解代码意图。</p><p>命名是代码可读性的基石。所有命名均不得使用汉语拼音，尤其是拼音缩写。</p><ul><li><strong>变量与函数</strong>：使用小驼峰命名法 (camelCase)，如 <code>buildProject</code>, <code>configPath</code>。推荐使用描述性强的长名称。</li><li><strong>常量</strong>：使用大写蛇形命名法 (UPPER_SNAKE_CASE)，如 <code>DEFAULT_PORT</code>, <code>MAX_THREADS</code>。</li><li><strong>类 (Class)</strong>：使用大驼峰命名法 (PascalCase)，如 <code>Compiler</code>, <code>DevServer</code>。基类建议包含 <code>Base</code> 或 <code>Abstract</code> 后缀。</li><li><strong>私有成员</strong>：使用 TypeScript 的 <code>private</code> 关键字或 ECMAScript 的 <code>#</code> 私有字段表示，不再使用下划线前缀。</li><li><strong>布尔值</strong>：使用 <code>is</code>, <code>has</code>, <code>can</code>, <code>should</code>, <code>will</code> 等作为前缀，并表达正向含义，如 <code>isLoading</code>, <code>hasError</code>。</li><li><strong>异步函数</strong>：建议以 <code>Async</code> 作为后缀，或使用明确的动词前缀，如 <code>fetchDataAsync</code>。</li><li><strong>事件与回调</strong>：事件处理函数使用 <code>handle</code> 或 <code>on</code> 前缀；回调函数使用描述性动词命名。</li><li><strong>未使用的参数</strong>：对于未使用的函数参数或解构变量，<strong>必须</strong>使用下划线 <code>_</code> 作为前缀，以消除 Linter 警告。此规则由 <code>&quot;correctness/noUnusedVariables&quot;: &quot;warn&quot;</code> 强制检查。</li><li><strong>缩写</strong>：类名中的缩写词应全部大写 (<code>APIClient</code>)；变量名中的缩写词遵循 camelCase (<code>apiClient</code>)。</li><li><strong>文件与目录</strong>： <ul><li>目录和通用文件：统一使用小写连字符命名法 (kebab-case)。</li><li>后端特定文件 (NestJS)：遵循框架的点分式规范 (<code>user.service.ts</code>)。</li><li>测试文件：命名为 <code>*.spec.ts</code> 或 <code>*.test.ts</code>。</li></ul></li><li><strong>React 组件与 Hooks</strong>：组件名用 PascalCase；自定义 Hook 必须以 <code>use</code> 开头。</li><li><strong>类型守卫函数</strong>：统一使用 <code>isXxx</code> 格式命名。</li></ul><h2 id="_6-typescript-类型命名规范" tabindex="-1">6. TypeScript 类型命名规范 <a class="header-anchor" href="#_6-typescript-类型命名规范" aria-label="Permalink to &quot;6. TypeScript 类型命名规范&quot;">​</a></h2><ul><li><strong>接口 (Interface) 与类型别名 (Type)</strong>：使用 PascalCase，如 <code>UserConfig</code>, <code>BuildMode</code>。</li><li><strong>枚举 (Enum)</strong>： <ul><li>枚举名使用 PascalCase (<code>UserStatus</code>)。</li><li>枚举成员使用 UPPER_SNAKE_CASE (<code>ACTIVE</code>)。</li><li>优先使用 <code>const enum</code> 以优化产物体积，但需确保构建链支持且符合 <code>isolatedModules</code> 的使用要求。</li></ul></li><li><strong>泛型 (Generics)</strong>：简单泛型使用 <code>T</code>, <code>U</code>, <code>K</code>；复杂泛型使用有意义的 PascalCase 名称 (<code>TResultData</code>)。</li><li><strong>命名空间 (Namespace)</strong>：禁止在新代码中使用，统一使用 ES 模块。</li></ul><h2 id="_7-css-样式规范" tabindex="-1">7. CSS 样式规范 <a class="header-anchor" href="#_7-css-样式规范" aria-label="Permalink to &quot;7. CSS 样式规范&quot;">​</a></h2><ul><li><strong>CSS 预处理器</strong>：在不使用 Tailwind CSS 的项目中，可选用 <code>less</code> 或 <code>scss</code>。若使用 Tailwind CSS (v4+)，则其应作为唯一的 CSS 构建工具。因为 Tailwind v4 明确和预处理器不兼容。</li><li><strong>CSS 命名</strong>：遵循 BEM 规范。</li><li><strong>样式隔离</strong>：React/SolidJS 项目推荐使用 CSS Modules；Vue 项目推荐使用 <code>&lt;style scoped&gt;</code>。</li></ul><h2 id="_8-注释规范" tabindex="-1">8. 注释规范 <a class="header-anchor" href="#_8-注释规范" aria-label="Permalink to &quot;8. 注释规范&quot;">​</a></h2><ul><li><strong>核心原则</strong>：注释重在解释“<strong>为什么</strong>”（Why），而非“<strong>做了什么</strong>”（What）。代码应尽量自解释其功能，注释补充设计意图、背景与原因。</li><li><strong>TSDoc 风格</strong>：在 TypeScript 项目中，公开的 API 应使用 TSDoc 风格的块注释 (<code>/** ... */</code>)，并使用 <code>@param</code>, <code>@returns</code> 等标准标签。</li></ul>',27)])])}const p=e(i,[["render",l]]);export{h as __pageData,p as default};
